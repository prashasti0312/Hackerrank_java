/**
We define the following terms:

Lexicographical Order, also known as alphabetic or dictionary order, orders characters as follows:
A < B < C < ... < Z
For example, ball < cat, dog < dorm, Happy < happy, Zoo < ball.

A substring of a string is a contiguous block of characters in the string. For example, the substrings of abc are a, b, c, ab, bc, and 
abc.
Given a string, S, and an integer, k, complete the function so that it finds the lexicographically smallest and largest substrings of 
length k.

Input Format

The first line contains a string denoting s.
The second line contains an integer denoting k.

Constraints
1<= |s| <= 100
s consists of English alphabetic letters only (i.e., [a-zA-Z]).
Output Format

Return the respective lexicographically smallest and largest substrings as a single newline-separated string.

Sample Input 0

welcometojava
3
Sample Output 0

ava
wel
*/
import java.util.Scanner;

public class Solution {
public static String getSmallestAndLargest(String s, int k) {
        String smallest = "";
        String largest = "";

        s = s.replaceAll(" ", "");
        String[] splitWord = new String[s.length()-(k-1)];
        for(int i=0; i<(s.length()-(k-1));i++){
            splitWord[i] = s.substring(i, i+k);
        }

        for(int j=0; j<splitWord.length; j++){
            String a= splitWord[j];
            for(k=0; k<splitWord.length-j-1; k++){
                String temp = splitWord[k];
                int result = splitWord[k].compareTo(splitWord[k+1]);

                if(result > 0){
                    splitWord[k] = splitWord[k+1];
                    splitWord[k+1] = temp;
                }
            }
        }

        //Arrays.sort(splitWord);
        smallest = splitWord[0];
        largest  = splitWord[splitWord.length-1]; 
        return smallest + "\n" + largest;
    }




    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        String s = scan.next();
        int k = scan.nextInt();
        scan.close();
      
        System.out.println(getSmallestAndLargest(s, k));
    }
}
